name: CI Test
run-name: CI TEST

on:
  push:
    branches:
      - feature/ci-test
env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GH_EMAIL: "41898282+github-actions[bot]@users.noreply.github.com"
  GH_USER: "github-actions[bot]"
  IS_UPDATE_VER: is_update_version
  IS_RELEASE_COMMIT: is_release_commit

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      is_release: ${{ steps.release-decision.outputs.is_release }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          cache: "yarn"

      - name: Check the version
        id: check-diff-version
        run: |
          DIFF_COUNT="$(git diff HEAD HEAD^ --relative package.json |grep '"version":'|wc -l)"

          VAR_NAME="is_update_version"
          if [ ${DIFF_COUNT} -eq 2 ]; then
            echo "Detected to have updated the version in package.json"
            echo "${{env.IS_UPDATE_VER}}=1" >>"${GITHUB_OUTPUT}"
          else
            echo "The version in package.json is not updated"
            echo "${{env.IS_UPDATE_VER}}=0" >>"${GITHUB_OUTPUT}"
          fi
      - name: Identify the version about to release
        id: identify-version
        run: |
          APP_VERSION="$(cat ./package.json |jq .version|sed -e 's/"//g'| head -n1)"
          if [ ! -n "${APP_VERSION}" ]; then
            exit 255
          fi
          echo "Detected the version: ${APP_VERSION}"
          echo "app_version=${APP_VERSION}" >>"${GITHUB_OUTPUT}"
          echo "app_version_text=v${APP_VERSION}" >>"${GITHUB_OUTPUT}"

      - name: Check the commit message
        id: check-commit-msg
        run: |
          COMMIT_MSG="$(echo "${{ github.event.head_commit.message }}")"
          COMMIT_MSG_LOW="$(echo "${COMMIT_MSG,,}")"
          COUNT_RELEASE="$(echo "${COMMIT_MSG_LOW}" | grep "release" | wc -l)"
          COUNT_VERSION="$(echo "${COMMIT_MSG_LOW}" | grep "${{steps.identify-version.outputs.app_version}}" | wc -l)"
          if [ ${COUNT_RELEASE} -gt 0 -and ${COUNT_VERSION} -gt 0  ]; then
            echo "Judging from the commit message that it is subject to release processing."
            echo "${{env.IS_RELEASE_COMMIT}}=1" >>"${GITHUB_OUTPUT}"
          else
            echo "This commit is not  subject to release processing."
            echo "${{env.IS_RELEASE_COMMIT}}=0" >>"${GITHUB_OUTPUT}"
          fi
      - name: Decision to start release process
        id: release-decision
        run: |
          IS_UPDATE_VER=${{ steps.check-diff-version.outputs.is_update_version }}
          IS_RELEASE_COMMIT=${{ steps.check-commit-msg.outputs.is_release_commit }}
          if [ ${IS_UPDATE_VER} -gt 0 -or ${IS_RELEASE_COMMIT} -gt 0 ]; then
            echo "Steart Release process"
            echo "is_release=1" >>"${GITHUB_OUTPUT}"
          else
            echo "Skip Release process"
            echo "is_release=0" >>"${GITHUB_OUTPUT}"
          fi

  job1:
    needs:
      - prepare
    if: ${{ needs.prepare.outputs.is_release > 0 }}
    runs-on: ubuntu-latest
    steps:
      - name: Release
        run: echo "START-RELEASE"
  job2:
    needs:
      - job1
    runs-on: ubuntu-latest
    steps:
      - name: Publish
        run: echo "START-Publish"
